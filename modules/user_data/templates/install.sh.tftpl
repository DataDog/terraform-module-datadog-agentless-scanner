#!/bin/bash
set +x
set -u
set -e
set -o pipefail

fatal_error () {
  printf "FATAL ERROR: shutting down\n"
  shutdown -h now
}

trap 'fatal_error' ERR

# Enable the nbd module
modprobe nbd nbds_max=128
echo "nbd" > /etc/modules-load.d/nbd.conf
echo "options nbd nbds_max=128" > /etc/modprobe.d/nbd.conf

# Install requirements
snap install --no-wait semgrep
apt update
apt install -y nbd-client curl jq

# Get IMDS metadata to fetch the API Key from SecretsManager (without having to install awscli)
IMDS_TOKEN=$(        curl -sSL -XPUT "http://169.254.169.254/latest/api/token"                                              -H "X-AWS-EC2-Metadata-Token-TTL-Seconds: 30")
IMDS_INSTANCE_ID=$(  curl -sSL -XGET "http://169.254.169.254/latest/meta-data/instance-id"                                  -H "X-AWS-EC2-Metadata-Token: $IMDS_TOKEN")
IMDS_AWS_REGION=$(   curl -sSL -XGET "http://169.254.169.254/latest/meta-data/placement/region"                             -H "X-AWS-EC2-Metadata-Token: $IMDS_TOKEN")
IMDS_INSTANCE_ROLE=$(curl -sSL -XGET "http://169.254.169.254/latest/meta-data/iam/security-credentials/"                    -H "X-AWS-EC2-Metadata-Token: $IMDS_TOKEN")
IMDS_CREDS=$(        curl -sSL -XGET "http://169.254.169.254/latest/meta-data/iam/security-credentials/$IMDS_INSTANCE_ROLE" -H "X-AWS-EC2-Metadata-Token: $IMDS_TOKEN")

AWS_ACCESS_KEY_ID=$(    jq -r '.AccessKeyId'     <<< "$IMDS_CREDS")
AWS_SECRET_ACCESS_KEY=$(jq -r '.SecretAccessKey' <<< "$IMDS_CREDS")
AWS_SECURITY_TOKEN=$(   jq -r '.Token'           <<< "$IMDS_CREDS")

AWS_SECRET_JSON=$(curl --noproxy '*' -sSL -X POST "https://secretsmanager.$IMDS_AWS_REGION.amazonaws.com" \
    --user "$AWS_ACCESS_KEY_ID:$AWS_SECRET_ACCESS_KEY" \
    --aws-sigv4 "aws:amz:$IMDS_AWS_REGION:secretsmanager" \
    --header "X-Amz-Security-Token: $AWS_SECURITY_TOKEN" \
    --header "X-Amz-Target: secretsmanager.GetSecretValue" \
    --header "Content-Type: application/x-amz-json-1.1" \
    --data "{\"SecretId\":\"${api_key_secret_arn}\"}")

DD_HOSTNAME="agentless-scanning-$IMDS_AWS_REGION-$IMDS_INSTANCE_ID"
DD_SITE="${site}"
DD_API_KEY="$(jq -r '.SecretString' <<< "$AWS_SECRET_JSON")"
DD_AGENTLESS_VERSION="${scanner_version}"
DD_AGENTLESS_CHANNEL="${scanner_channel}"

hostnamectl hostname "$DD_HOSTNAME"

# Install the agent
DD_API_KEY="$DD_API_KEY" \
  DD_SITE="$DD_SITE" \
  DD_HOSTNAME="$DD_HOSTNAME" \
  bash -c "$(curl -L https://s3.amazonaws.com/dd-agent/scripts/install_script_agent7.sh)"

# Install the agentless-scanner
echo "deb [signed-by=/usr/share/keyrings/datadog-archive-keyring.gpg] https://apt.datadoghq.com/ $DD_AGENTLESS_CHANNEL agentless-scanner" >> /etc/apt/sources.list.d/datadog.list
apt update
agentless_pkg_pattern="([[:digit:]]:)?$DD_AGENTLESS_VERSION(\.[[:digit:]]+){0,1}(~rc\.[[:digit:]]+)?(-[[:digit:]])?"
agentless_version_custom="$(apt-cache madison datadog-agentless-scanner | grep -E "$agentless_pkg_pattern" -om1)" || true
if [ -z "$agentless_version_custom" ]; then
  printf "Could not find a version of datadog-agentless-scanner from %s" "$DD_AGENTLESS_VERSION"
  exit 1
fi
apt install -y "datadog-agentless-scanner=$agentless_version_custom"

# Adding automatic reboot on kernel updates
cat << EOF >> /etc/apt/apt.conf.d/50unattended-upgrades
Unattended-Upgrade::Automatic-Reboot "true";
Unattended-Upgrade::Automatic-Reboot-WithUsers "true";
Unattended-Upgrade::Automatic-Reboot-Time "now";
EOF

# Activate agentless scanner logging
mkdir -p /etc/datadog-agent/conf.d/agentless-scanner.d
cat <<EOF > /etc/datadog-agent/conf.d/agentless-scanner.d/conf.yaml
logs:
  - type: file
    path: "/var/log/datadog/agentless-scanner.log"
    service: "agentless-scanner"
    source: go
    sourcecategory: sourcecode
EOF

chown -R dd-agent: /etc/datadog-agent/conf.d/agentless-scanner.d

# Custom configuration for agent
cat <<EOF > /etc/datadog-agent/datadog.yaml
api_key: $DD_API_KEY
site: $DD_SITE
hostname: $DD_HOSTNAME
logs_enabled: true
ec2_prefer_imdsv2: true
%{if length(agent_configuration) > 0}
${yamlencode(agent_configuration)}
%{endif}
EOF

# Custom configuration for security-agent
%{if length(security_agent_configuration) > 0}
cat <<EOF > /etc/datadog-agent/security-agent.yaml
${yamlencode(security_agent_configuration)}
EOF

chmod 600 /etc/datadog-agent/security-agent.yaml
chown dd-agent: /etc/datadog-agent/security-agent.yaml
%{endif}

# Custom configuration for system-probe
%{if length(system_probe_configuration) > 0}
cat <<EOF > /etc/datadog-agent/system-probe.yaml
${yamlencode(system_probe_configuration)}
EOF

chmod 600 /etc/datadog-agent/system-probe.yaml
chown root:root /etc/datadog-agent/system-probe.yaml
%{endif}

cat <<EOF > /etc/datadog-agent/agentless-scanner.yaml
hostname: $DD_HOSTNAME
api_key: $DD_API_KEY
site: $DD_SITE
installation_mode: terraform
installation_version: 0.11.3
%{if length(scanner_configuration) > 0}
${yamlencode(scanner_configuration)}
%{endif}
EOF

chmod 600 /etc/datadog-agent/agentless-scanner.yaml

# Restart the agent
service datadog-agent restart

# Give some room to the agent to start to not miss logs
sleep 5

# Enable and start datadog-agentless-scaner
systemctl enable datadog-agentless-scanner
systemctl start datadog-agentless-scanner
