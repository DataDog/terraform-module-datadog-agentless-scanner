#!/bin/bash
set +x
set -u
set -e
set -o pipefail

fatal_error () {
  printf "FATAL ERROR: shutting down\n"
  shutdown -h now
}

trap 'fatal_error' ERR

# Enable the nbd module
modprobe nbd nbds_max=128
echo "nbd" > /etc/modules-load.d/nbd.conf
echo "options nbd nbds_max=128" > /etc/modprobe.d/nbd.conf

# Install requirements
snap install --no-wait semgrep
apt update
apt install -y nbd-client curl

# Get IMDS metadata to fetch the API Key from SecretsManager (without having to install awscli)
IMDS_TOKEN=$(      curl -sSL -XPUT "http://169.254.169.254/latest/api/token"                  -H "X-AWS-EC2-Metadata-Token-TTL-Seconds: 30")
IMDS_INSTANCE_ID=$(curl -sSL -XGET "http://169.254.169.254/latest/meta-data/instance-id"      -H "X-AWS-EC2-Metadata-Token: $IMDS_TOKEN")
IMDS_AWS_REGION=$( curl -sSL -XGET "http://169.254.169.254/latest/meta-data/placement/region" -H "X-AWS-EC2-Metadata-Token: $IMDS_TOKEN")
unset IMDS_TOKEN

DD_HOSTNAME="agentless-scanning-$IMDS_AWS_REGION-$IMDS_INSTANCE_ID"
DD_SITE="${site}"
DD_API_KEY="ENC[${api_key_secret_arn}]"
DD_AGENTLESS_VERSION="${scanner_version}"
DD_AGENTLESS_CHANNEL="${scanner_channel}"

hostnamectl hostname "$DD_HOSTNAME"

# Install the agent
DD_INSTALL_ONLY=true \
  DD_API_KEY="TBD" \
  DD_SITE="$DD_SITE" \
  DD_HOSTNAME="$DD_HOSTNAME" \
  bash -c "$(curl -L https://s3.amazonaws.com/dd-agent/scripts/install_script_agent7.sh)"

# Install the agentless-scanner
echo "deb [signed-by=/usr/share/keyrings/datadog-archive-keyring.gpg] https://apt.datadoghq.com/ $DD_AGENTLESS_CHANNEL agentless-scanner" >> /etc/apt/sources.list.d/datadog.list
apt update
agentless_pkg_pattern="([[:digit:]]:)?$DD_AGENTLESS_VERSION(\.[[:digit:]]+){0,1}(~rc\.[[:digit:]]+)?(-[[:digit:]])?"
agentless_version_custom="$(apt-cache madison datadog-agentless-scanner | grep -E "$agentless_pkg_pattern" -om1)" || true
if [ -z "$agentless_version_custom" ]; then
  printf "Could not find a version of datadog-agentless-scanner from %s" "$DD_AGENTLESS_VERSION"
  exit 1
fi
# We mask/unmask because apt auto-starts the service, and we do
# not want to start it before the configuration is in place.
systemctl mask datadog-agentless-scanner.service
apt install -y "datadog-agentless-scanner=$agentless_version_custom"
systemctl unmask datadog-agentless-scanner.service

# Adding automatic reboot on kernel updates
cat << EOF >> /etc/apt/apt.conf.d/50unattended-upgrades
Unattended-Upgrade::Automatic-Reboot "true";
Unattended-Upgrade::Automatic-Reboot-WithUsers "true";
Unattended-Upgrade::Automatic-Reboot-Time "now";
EOF

# Activate agentless scanner logging
mkdir -p /etc/datadog-agent/conf.d/agentless-scanner.d
cat <<EOF > /etc/datadog-agent/conf.d/agentless-scanner.d/conf.yaml
logs:
  - type: file
    path: "/var/log/datadog/agentless-scanner.log"
    service: "agentless-scanner"
    source: go
    sourcecategory: sourcecode
EOF

chown -R dd-agent: /etc/datadog-agent/conf.d/agentless-scanner.d

# Custom configuration for agent
cat <<EOF > /etc/datadog-agent/datadog.yaml
api_key: $DD_API_KEY
site: $DD_SITE
hostname: $DD_HOSTNAME
logs_enabled: true
ec2_prefer_imdsv2: true
secret_backend_command: /usr/local/bin/dd-secret-backend
%{if length(agent_configuration) > 0}
${yamlencode(agent_configuration)}
%{endif}
EOF

cat <<EOF > /usr/local/bin/dd-secret-backend
#!/bin/bash
datadog-agentless-scanner secrets || exit 1
EOF
chown dd-agent: /usr/local/bin/dd-secret-backend
chmod 700 /usr/local/bin/dd-secret-backend

cat <<EOF > /etc/datadog-agent/agentless-scanner.yaml
hostname: $DD_HOSTNAME
api_key: $DD_API_KEY
site: $DD_SITE
installation_mode: terraform
installation_version: 0.11.7
%{if length(scanner_configuration) > 0}
${yamlencode(scanner_configuration)}
%{endif}
EOF

chown dd-agent: /etc/datadog-agent/agentless-scanner.yaml
chmod 600 /etc/datadog-agent/agentless-scanner.yaml

# Restart the agent
systemctl restart datadog-agent

# Enable and start datadog-agentless-scaner
systemctl enable --now datadog-agentless-scanner
