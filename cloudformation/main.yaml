AWSTemplateFormatVersion: '2010-09-09'
Description: Datadog Agentless Scanner CloudFormation deployment template

Parameters:
  DatadogAPIKey:
    Type: String
    Description: API key for the Datadog account (find at https://app.datadoghq.com/organization-settings/api-keys)
    NoEcho: true

  DatadogSite:
    Type: String
    Description: The Datadog site to use for the Datadog Agentless Scanner
    Default: datadoghq.com
    AllowedValues:
      - datadoghq.com
      - datadoghq.eu
      - us3.datadoghq.com
      - us5.datadoghq.com
      - ap1.datadoghq.com
      - ddog-gov.com
      - datad0g.com

  ScannerVPCId:
    Type: AWS::EC2::VPC::Id
    Description: The VPC to use for the Datadog Agentless Scanner. If not provided, a new VPC will be created (should be specified along with ScannerSubnetId).
    Default: ''

  ScannerSubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: The subnet to use for the Datadog Agentless Scanner. If not provided, a new VPC will be created (should be specified along with ScannerVPCId).
    Default: ''

  ScannerSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: The security group to use for the Datadog Agentless Scanner. If not provided a new security group will be created.
    Default: ''

  ScannerDelegateRoleName:
    Type: String
    Description: The name of the role assumed by the Datadog Agentless Scanner
    Default: DatadogAgentlessScannerDelegateRole

  ScannerSSHKeyPairName:
    Type: String
    Description: The key pair name to use for the Datadog Agentless Scanner. If not provided instance will not be accessible via SSH.
    Default: ''

  ScannerInstanceVolumeSize:
    Type: Number
    Description: The size of the volume in GB used by the Datadog Agentless Scanner
    Default: 30

  ScannerInstanceType:
    Type: String
    Description: The instance type to use for the Datadog Agentless Scanner
    Default: t4g.large

  ScannerInstanceMonitoring:
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Description: Whether to enable detailed monitoring for the Datadog Agentless Scanner instances
    Default: "false"

  ScannerOfflineModeEnabled:
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Description: Whether to enable the offline mode for the Datadog Agentless Scanner
    Default: "false"

  ScannerAutoScalingGroupSize:
    Type: Number
    Description: The number of instances in the Auto Scaling Group
    Default: 1


Conditions:
  ProvideSshKeyPair: !Not
    - !Equals
      - !Ref 'ScannerSSHKeyPairName'
      - ''
  CreateVPCResources: !Equals
    - !Ref 'ScannerSubnetId'
    - ''
  CreateSecurityGroup: !Equals
    - !Ref 'ScannerSecurityGroupId'
    - ''
  OfflineModeEnabled: !Equals
    - !Ref 'ScannerOfflineModeEnabled'
    - 'true'

Rules:
  ScannerVPCIdAndSubnetId:
    AssertDescription: 'Checking arguments ScannerVPCId and ScannerSubnetId'
    RuleCondition: !Or [!Not [!Equals [!Ref 'ScannerVPCId', '']], !Not [!Equals [!Ref 'ScannerSubnetId', '']]]
    Assertions:
      - Assert: !And [!Not [!Equals [!Ref 'ScannerVPCId', '']], !Not [!Equals [!Ref 'ScannerSubnetId', '']]]
        AssertDescription: 'ScannerVPCId and ScannerSubnetId should be specified together'

Resources:
  ScannerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateSecurityGroup
    Properties:
      GroupDescription: Security group for the Datadog Agentless Scanner
      VpcId: !If [CreateVPCResources, !GetAtt 'VPCSubnetPrivate.VpcId', !Ref 'ScannerVPCId']
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0'
          FromPort: 0
          ToPort: 65535
          Description: All traffic
          IpProtocol: 'tcp'
      Tags:
        - Key: Datadog
          Value: 'true'
        - Key: DatadogAgentlessScanner
          Value: 'true'

  ScannerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      TagSpecifications:
        - ResourceType: launch-template
          Tags:
            - Key: Datadog
              Value: 'true'
            - Key: DatadogAgentlessScanner
              Value: 'true'
      LaunchTemplateData:
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: false
            DeleteOnTermination: true
            SubnetId: !If [CreateVPCResources, !Ref 'VPCSubnetPublic', !Ref 'ScannerSubnetId']
            Groups:
              - !If [CreateSecurityGroup, !Ref 'ScannerSecurityGroup', !Ref 'ScannerSecurityGroupId']
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Datadog
                Value: 'true'
              - Key: Name
                Value: DatadogAgentlessScanner
              - Key: DatadogAgentlessScanner
                Value: 'true'
          - ResourceType: network-interface
            Tags:
              - Key: Datadog
                Value: 'true'
              - Key: DatadogAgentlessScanner
                Value: 'true'
          - ResourceType: volume
            Tags:
              - Key: Datadog
                Value: 'true'
              - Key: DatadogAgentlessScanner
                Value: 'true'
        KeyName: !If [ProvideSshKeyPair, !Ref 'ScannerSSHKeyPairName', !Ref 'AWS::NoValue']
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
              set +x
              set -u
              set -e
              set -o pipefail

              INSTANCE_ID=$(cat /var/lib/cloud/data/instance-id)

              DD_HOSTNAME="agentless-scanning-${AWS::Region}-$INSTANCE_ID"
              echo $DD_HOSTNAME > /etc/hostname
              DD_API_KEY="${DatadogAPIKey}"

              # Enable the nbd module
              modprobe nbd nbds_max=128
              echo "nbd" > /etc/modules-load.d/nbd.conf
              echo "options nbd nbds_max=128" > /etc/modprobe.d/nbd.conf

              # Install requirements
              apt update
              apt install -y nbd-client

              # Install the agent
              DD_API_KEY=$DD_API_KEY \
                DD_SITE="${DatadogSite}" \
                DD_HOSTNAME=$DD_HOSTNAME \
                DD_AGENT_MINOR_VERSION="50.3" \
                bash -c "$(curl -L https://s3.amazonaws.com/dd-agent/scripts/install_script_agent7.sh)"

              # Install the agentless-scanner
              SCANNER_VERSION="7.51.0~agentless~scanner~2024022201"
              curl -sL -o /tmp/datadog-agentless-scanner_$SCANNER_VERSION-1_arm64.deb https://s3.amazonaws.com/apt.datad0g.com/pool/d/da/datadog-agentless-scanner_$SCANNER_VERSION-1_arm64.deb
              dpkg -i /tmp/datadog-agentless-scanner_$SCANNER_VERSION-1_arm64.deb

              # Patch agent configuration
              sed -i '/.*logs_enabled:.*/a logs_enabled: true'           /etc/datadog-agent/datadog.yaml
              sed -i '/.*ec2_prefer_imdsv2:.*/a ec2_prefer_imdsv2: true' /etc/datadog-agent/datadog.yaml

              # Adding automatic reboot on kernel updates
              cat << EOF >> /etc/apt/apt.conf.d/50unattended-upgrades
              Unattended-Upgrade::Automatic-Reboot "true";
              Unattended-Upgrade::Automatic-Reboot-WithUsers "true";
              Unattended-Upgrade::Automatic-Reboot-Time "now";
              EOF

              # Activate agentless scanner logging
              mkdir -p /etc/datadog-agent/conf.d/agentless-scanner.d
              cat <<EOF > /etc/datadog-agent/conf.d/agentless-scanner.d/conf.yaml
              logs:
                - type: file
                  path: "/var/log/datadog/agentless-scanner.log"
                  service: "agentless-scanner"
                  source: "datadog-agent"
              EOF

              chown -R dd-agent: /etc/datadog-agent/conf.d/agentless-scanner.d

              if [ "${ScannerOfflineModeEnabled}" = "true" ]; then
                cat <<EOF >> /etc/datadog-agent/datadog.yaml
              agentless_scanner:
                default_roles:
                  - "arn:aws:iam::${AWS::AccountId}:role/${ScannerDelegateRoleName}"
              EOF
              fi

              # Restart the agent
              service datadog-agent restart

              # Enable and start datadog-agentless-scaner
              systemctl enable datadog-agentless-scanner
              systemctl start datadog-agentless-scanner

        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              Encrypted: true
              DeleteOnTermination: true
              VolumeSize: !Ref 'ScannerInstanceVolumeSize'
              VolumeType: gp2
        IamInstanceProfile:
          Name: !Ref 'ScannerAgentInstanceProfile'
        ImageId: resolve:ssm:/aws/service/canonical/ubuntu/server/22.04/stable/current/arm64/hvm/ebs-gp2/ami-id
        InstanceType: !Ref 'ScannerInstanceType'
        Monitoring:
          Enabled: !Ref 'ScannerInstanceMonitoring'
        MetadataOptions:
          HttpTokens: required

  ScannerAgentInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref 'ScannerInstanceRole'

  ScannerAgentPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AssumeCrossAccountScanningRole
            Action: 'sts:AssumeRole'
            Effect: Allow
            Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${ScannerDelegateRoleName}'

  ScannerDelegateRoleOrchestratorPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policy for the Datadog Agentless Scanner orchestrator allowing the creation and deletion of snapshots.
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: DatadogAgentlessScannerResourceTagging
            Action: 'ec2:CreateTags'
            Condition:
              StringEquals:
                'ec2:CreateAction':
                  - CreateSnapshot
                  - CreateVolume
            Effect: Allow
            Resource:
              - 'arn:aws:ec2:*:*:volume/*'
              - 'arn:aws:ec2:*:*:snapshot/*'
          - Sid: DatadogAgentlessScannerVolumeSnapshotCreation
            Action: 'ec2:CreateSnapshot'
            Condition:
              StringNotEquals:
                'aws:ResourceTag/DatadogAgentlessScanner': 'false'
            Effect: Allow
            Resource: 'arn:aws:ec2:*:*:volume/*'
          - Sid: DatadogAgentlessScannerSnapshotCreation
            Action: 'ec2:CreateSnapshot'
            Condition:
              'ForAllValues:StringLike':
                'aws:TagKeys': DatadogAgentlessScanner*
              StringEquals:
                'aws:RequestTag/DatadogAgentlessScanner': 'true'
            Effect: Allow
            Resource: 'arn:aws:ec2:*:*:snapshot/*'
          - Sid: DatadogAgentlessScannerSnapshotCleanup
            Action:
              - 'ec2:DeleteSnapshot'
            Condition:
              StringEquals:
                'aws:ResourceTag/DatadogAgentlessScanner': 'true'
            Effect: Allow
            Resource: 'arn:aws:ec2:*:*:snapshot/*'
          - Sid: DatadogAgentlessScannerDescribeSnapshots
            Action: 'ec2:DescribeSnapshots'
            Effect: Allow
            Resource: '*'

  ScannerDelegateRoleWorkerPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policy for the Datadog Agentless Scanner worker allowing the listing and reading of snapshots.
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: DatadogAgentlessScannerSnapshotAccess
            Action:
              - 'ebs:ListSnapshotBlocks'
              - 'ebs:ListChangedBlocks'
              - 'ebs:GetSnapshotBlock'
            Condition:
              StringEquals:
                'aws:ResourceTag/DatadogAgentlessScanner': 'true'
            Effect: Allow
            Resource: 'arn:aws:ec2:*:*:snapshot/*'
          - Sid: DatadogAgentlessScannerDescribeSnapshots
            Action: 'ec2:DescribeSnapshots'
            Effect: Allow
            Resource: '*'
          - Sid: DatadogAgentlessScannerDescribeVolumes
            Action: 'ec2:DescribeVolumes'
            Effect: Allow
            Resource: '*'
          - Sid: GetLambdaDetails
            Action: 'lambda:GetFunction'
            Effect: Allow
            Resource: 'arn:aws:lambda:*:*:function:*'

  ScannerDelegateOfflineRolePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policy for the Datadog Agentless Scanner worker allowing the listing snapshots, instances, images to perform offline scans.
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: DatadogAgentlessScannerOfflineModeListLambdas
            Action: lambda:ListFunctions
            Effect: Allow
            Resource: '*'
          - Sid: DatadogAgentlessScannerOfflineModeListInstances
            Action: ec2:DescribeInstances
            Effect: Allow
            Resource: '*'
          - Sid: DatadogAgentlessScannerOfflineModeRegions
            Action: ec2:DescribeRegions
            Effect: Allow
            Resource: '*'
          - Sid: DatadogAgentlessScannerOfflineModeListVolumes
            Action: ec2:DescribeVolumes
            Effect: Allow
            Resource: '*'
          - Sid: DatadogAgentlessScannerOfflineModeListImages
            Action: ec2:DescribeImages
            Effect: Allow
            Resource: '*'

  ScannerInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: 'sts:AssumeRole'
            Sid: EC2AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - !Ref 'ScannerAgentPolicy'
      Description: Role used by the Datadog agentless scanner instance
      Tags:
        - Key: Datadog
          Value: 'true'
        - Key: DatadogAgentlessScanner
          Value: 'true'

  ScannerDelegateRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref 'ScannerDelegateRoleName'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: EC2AssumeRole
            Effect: Allow
            Principal:
              AWS: !GetAtt 'ScannerInstanceRole.Arn'
            Action: 'sts:AssumeRole'

      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - !Ref 'ScannerDelegateRoleOrchestratorPolicy'
        - !Ref 'ScannerDelegateRoleWorkerPolicy'
        - !If [OfflineModeEnabled, !Ref 'ScannerDelegateOfflineRolePolicy', !Ref 'AWS::NoValue']
      Description: Role assumed by the Datadog Agentless scanner agent to perform scans
      Tags:
        - Key: DatadogAgentlessScanner
          Value: 'true'
        - Key: Datadog
          Value: 'true'

  ScannerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref 'ScannerLaunchTemplate'
        Version: !GetAtt 'ScannerLaunchTemplate.LatestVersionNumber'
      MinSize: !Ref 'ScannerAutoScalingGroupSize'
      MaxSize: !Ref 'ScannerAutoScalingGroupSize'
      DesiredCapacity: !Ref 'ScannerAutoScalingGroupSize'
      Cooldown: 300
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      VPCZoneIdentifier:
        - !If [CreateVPCResources, !Ref 'VPCSubnetPrivate', !Ref 'ScannerSubnetId']
      TerminationPolicies:
        - Default
      Tags:
        - Key: Datadog
          Value: 'true'
          PropagateAtLaunch: false
        - Key: DatadogAgentlessScanner
          Value: 'true'
          PropagateAtLaunch: false
        - Key: Name
          Value: DatadogAgentlessScannerASG
          PropagateAtLaunch: false
      MaxInstanceLifetime: 86400
      NewInstancesProtectedFromScaleIn: false

  VPCNatElasticIP:
    Type: AWS::EC2::EIP
    Condition: CreateVPCResources
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: DatatogAgentlessScanner
        - Key: Datadog
          Value: 'true'
        - Key: DatadogAgentlessScanner
          Value: 'true'

  VPCInternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: CreateVPCResources
    Properties:
      Tags:
        - Key: DatadogAgentlessScanner
          Value: 'true'
        - Key: Name
          Value: DatatogAgentlessScanner
        - Key: Datadog
          Value: 'true'

  VPCNatGateway:
    Type: AWS::EC2::NatGateway
    Condition: CreateVPCResources
    Properties:
      SubnetId: !Ref 'VPCSubnetPublic'
      Tags:
        - Key: Datadog
          Value: 'true'
        - Key: DatadogAgentlessScanner
          Value: 'true'
        - Key: Name
          Value: DatatogAgentlessScanner
      AllocationId: !GetAtt 'VPCNatElasticIP.AllocationId'

  VPCRoutePublic:
    Type: AWS::EC2::Route
    Condition: CreateVPCResources
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'VPCInternetGateway'
      RouteTableId: !Ref 'VPCRouteTablePublic'

  VPCRoutePrivate:
    Type: AWS::EC2::Route
    Condition: CreateVPCResources
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'VPCNatGateway'
      RouteTableId: !Ref 'VPCRouteTablePrivate'

  VPCRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: CreateVPCResources
    Properties:
      VpcId: !GetAtt 'VPCSubnetPublic.VpcId'

  VPCRouteTablePublic:
    Type: AWS::EC2::RouteTable
    Condition: CreateVPCResources
    Properties:
      VpcId: !GetAtt 'VPCSubnetPublic.VpcId'
      Tags:
        - Key: Name
          Value: DatatogAgentlessScanner-public
        - Key: DatadogAgentlessScanner
          Value: 'true'
        - Key: Datadog
          Value: 'true'

  VPCRouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Condition: CreateVPCResources
    Properties:
      VpcId: !GetAtt 'VPCSubnetPublic.VpcId'
      Tags:
        - Key: Datadog
          Value: 'true'
        - Key: DatadogAgentlessScanner
          Value: 'true'
        - Key: Name
          Value: DatatogAgentlessScanner-private

  VPCSubnetRouteTableAssociationPrivate:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateVPCResources
    Properties:
      RouteTableId: !Ref 'VPCRouteTablePrivate'
      SubnetId: !Ref 'VPCSubnetPrivate'

  VPCSubnetRouteTableAssociationPublic:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateVPCResources
    Properties:
      RouteTableId: !Ref 'VPCRouteTablePublic'
      SubnetId: !Ref 'VPCSubnetPublic'

  VPCEndpointsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateVPCResources
    Properties:
      GroupDescription: VPC endpoint security group
      Tags:
        - Key: DatadogAgentlessScanner
          Value: 'true'
        - Key: Datadog
          Value: 'true'
      VpcId: !GetAtt 'VPCSubnetPublic.VpcId'
      SecurityGroupIngress:
        - CidrIp: !GetAtt 'VPC.CidrBlock'
          Description: TLS from VPC
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443

  VPCSubnetPublic:
    Type: AWS::EC2::Subnet
    Condition: CreateVPCResources
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: 10.0.0.0/19
      VpcId: !GetAtt 'VPCSubnetPrivate.VpcId'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: DatadogAgentlessScanner
          Value: 'true'
        - Key: Datadog
          Value: 'true'
        - Key: Name
          Value: DatatogAgentlessScanner-public

  VPCSubnetPrivate:
    Type: AWS::EC2::Subnet
    Condition: CreateVPCResources
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: 10.0.128.0/19
      VpcId: !Ref 'VPC'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: DatadogAgentlessScanner
          Value: 'true'
        - Key: Datadog
          Value: 'true'
        - Key: Name
          Value: DatatogAgentlessScanner-private

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: CreateVPCResources
    Properties:
      InternetGatewayId: !Ref 'VPCInternetGateway'
      VpcId: !GetAtt 'VPCSubnetPublic.VpcId'

  VPCEndpointS3:
    Type: AWS::EC2::VPCEndpoint
    Condition: CreateVPCResources
    Properties:
      VpcEndpointType: Gateway
      VpcId: !GetAtt 'VPCSubnetPublic.VpcId'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      PolicyDocument: '{"Statement":[{"Action":"*","Effect":"Allow","Principal":"*","Resource":"*"}]}'
      RouteTableIds:
        - !Ref 'VPCRouteTablePrivate'
        - !Ref 'VPCRouteTablePublic'
      PrivateDnsEnabled: false

  VPCEndpointLambda:
    Type: AWS::EC2::VPCEndpoint
    Condition: CreateVPCResources
    Properties:
      VpcEndpointType: Interface
      VpcId: !GetAtt 'VPCSubnetPublic.VpcId'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.lambda'
      PolicyDocument: '{"Statement":[{"Action":"*","Effect":"Allow","Principal":"*","Resource":"*"}]}'
      SubnetIds:
        - !Ref 'VPCSubnetPrivate'
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref 'VPCEndpointsSecurityGroup'

  VPCEndpointEBS:
    Type: AWS::EC2::VPCEndpoint
    Condition: CreateVPCResources
    Properties:
      VpcEndpointType: Interface
      VpcId: !GetAtt 'VPCSubnetPublic.VpcId'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ebs'
      PolicyDocument: '{"Statement":[{"Action":"*","Effect":"Allow","Principal":"*","Resource":"*"}]}'
      SubnetIds:
        - !Ref 'VPCSubnetPrivate'
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref 'VPCEndpointsSecurityGroup'

  VPC:
    Type: AWS::EC2::VPC
    Condition: CreateVPCResources
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: DatatogAgentlessScanner
        - Key: Datadog
          Value: 'true'
        - Key: DatadogAgentlessScanner
          Value: 'true'
